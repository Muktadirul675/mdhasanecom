datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  is_admin      Boolean         @default(false)
  is_staff      Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?
}

model Profile {
  id      String  @id @default(cuid())
  phone   String?
  address String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String  @unique
}

model Product {
  id               String     @id @default(cuid())
  name             String     @unique
  slug             String     @unique
  stock            Int
  description      String
  price            Int
  discounted_price Int?
  is_available     Boolean    @default(true)
  categories       Category[]
  images           Image[]
  sizes            Size[]
  Color            Color[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
}

model Category {
  id         String    @id @default(cuid())
  name       String
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Image {
  id         String   @id @default(cuid())
  url        String
  index      Int      @default(1)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  caption    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Size {
  id           String   @id @default(cuid())
  name         String
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  stock        Int
  is_available Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Color {
  id           String   @id @default(cuid())
  name         String
  hex String
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  stock        Int
  is_available Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

// Not to touch

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
